<?php

namespace App\Controllers;

use CodeIgniter\Files\File;
use Config\Services;
use App\Controllers\BaseController;
use App\Models\ModelPentest;
use App\Models\ModelDinas;
use CodeIgniter\Exceptions\PageNotFoundException;

class TabelPentest extends BaseController
{
    const UPLOAD_DIR = WRITEPATH . 'uploads';

    protected $model;
    protected $modelDinas;

    public function __construct()
    {
        $this->model = new ModelPentest();
        $this->modelDinas = new ModelDinas();
    }

    public function create()
    {
        $validationRules = [
            // Aturan validasi lainnya...
            'kd_pentest' => [
                'label' => 'ID Pentest',
                'rules' => 'required|min_length[1]',
                'errors' => [
                    'required'=>'{field} harus diisi',
                    'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter',
                ],
            ],

            // 'pemohon' => [
            //     'label' => 'Pemohon',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',
            //     ],
            // ],
            
            // 'url_target' => [
            //     'label' => 'URL Target',
            //     'rules' => 'required|min_length[5]|',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',

            //     ],
            // ],

            // 'p_jawab' => [
            //     'label' => 'Nama Penanggung Jawab',
            //     'rules' => 'required|min_length[5]|',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',

            //     ],
            // ],

            // 'p_email' => [
            //     'label' => 'Email',
            //     'rules' => 'required|min_length[5]|valid_email',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',
            //         'valid_email' => 'Email yang Anda masukan tidak valid'

            //     ],
            // ],

            // 'p_no' => [
            //     'label' => 'Kontak',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter'
            //     ],
            // ],

            // 'ip_addres' => [
            //     'label' => 'IP Address',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter'
            //     ],
            // ],

            // 'h_high' => [
            //     'label' => 'Hasil High',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            // 'h_med' => [
            //     'label' => 'Hasil Medium',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            // 'h_low' => [
            //     'label' => 'Hasil Low',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            'file_pdf' => [
                'label' => 'File PDF',
                'rules' => 'mime_in[file_pdf,application/pdf]|max_size[file_pdf,1024]',
                'errors' => [
                    'mime_in' => 'File yang diunggah harus berformat PDF.',
                    'max_size' => 'Ukuran file PDF tidak boleh melebihi 1MB.'
                ]
            ]
        ];
    
        $validation = \Config\Services::validation()->setRules($validationRules);

    if ($validation->withRequest($this->request)->run()) {
        $id = $this->request->getPost('id');
        $kd_pentest = $this->request->getPost('kd_pentest');
        $pemohon = $this->request->getPost('pemohon');
        $tanggal = $this->request->getPost('tanggal');
        $url_target = $this->request->getPost('url_target');
        $nama_in = $this->request->getPost('nama_in');
        $p_jawab = $this->request->getPost('p_jawab');
        $p_email = $this->request->getPost('p_email');
        $p_no = $this->request->getPost('p_no');
        $ip_addres = $this->request->getPost('ip_addres');
        $status_hg = $this->request->getPost('status_hg');
        $h_high = $this->request->getPost('h_high');
        $h_med = $this->request->getPost('h_med');
        $h_low = $this->request->getPost('h_low');
        $ket = $this->request->getPost('ket');
        $file_pdf = $this->request->getFile('file_pdf');

        // Periksa apakah file diunggah
        if ($file_pdf->isValid() && !$file_pdf->hasMoved()) {
            $kd_pentest = str_replace(['/', '\\'], '_', $kd_pentest);
            $nama_file = $kd_pentest . '_pentest.pdf';
            $lokasi_file = WRITEPATH . 'uploads/'; // Sesuaikan dengan direktori upload Anda
            $file_pdf->move($lokasi_file, $nama_file);
            $pdfPath = $lokasi_file . '/' . $nama_file;
        }
        else {
            // Setel nilai default jika file tidak diunggah
            $nama_file = null;
            $pdfPath = null;
        }
    
        $data = [
            'id' =>$id,
            'kd_pentest' => $kd_pentest,
            'pemohon' => $pemohon,
            'tanggal' => $tanggal,
            'url_target' => $url_target,
            'nama_in' => $nama_in,
            'p_jawab' => $p_jawab,
            'p_email' => $p_email,
            'p_no' => $p_no,
            'ip_addres' => $ip_addres,
            'status_hg' => $status_hg,
            'h_high' => $h_high,
            'h_med' => $h_med,
            'h_low' => $h_low,
            'ket' => $ket,
            'file_pdf' => $nama_file, // Nama file PDF disimpan sebagai string
            'pdf_data' => $pdfPath ? base64_encode(file_get_contents($pdfPath)) : null, // Data PDF diubah menjadi base64
            
        ];

        // Panggil metode model untuk meny impan data
        $hasil = $this->model->save($data);

        if ($hasil) {
            $response = [
                'status' => 'success',
                'message' => 'Berhasil Menambah Data, Silakan Tutup Kembali',
                'error' => false,
            ];
        } else {
            $response = [
                'status' => 'error',
                'message' => 'Gagal Menambah Data, Silakan Periksa Kembali',
                'error' => true,
                'error_messages' => 'Gagal menambah data ke database.',
            ];
        }
    } else {
        $response = [
            'status' => 'error',
            'message' => 'Gagal Menambah Data, Silakan Periksa Kembali',
            'error' => true,
            'error_messages' => $validation->getErrors(),
        ];
    }

    return $this->response->setJSON($response);
    
    }

    public function update()
    {
        $validationRules = [
            // Aturan validasi lainnya...
            'kd_pentest' => [
                'label' => 'ID Pentest',
                'rules' => 'required|min_length[1]',
                'errors' => [
                    'required'=>'{field} harus diisi',
                    'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter',
                ],
            ],

            // 'pemohon' => [
            //     'label' => 'Pemohon',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',
            //     ],
            // ],
            
            // 'url_target' => [
            //     'label' => 'URL Target',
            //     'rules' => 'required|min_length[5]|',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',

            //     ],
            // ],

            // 'p_jawab' => [
            //     'label' => 'Nama Penanggung Jawab',
            //     'rules' => 'required|min_length[5]|',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',

            //     ],
            // ],

            // 'p_email' => [
            //     'label' => 'Email',
            //     'rules' => 'required|min_length[5]|valid_email',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',
            //         'valid_email' => 'Email yang Anda masukan tidak valid'

            //     ],
            // ],

            // 'p_no' => [
            //     'label' => 'Kontak',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter'
            //     ],
            // ],

            // 'ip_addres' => [
            //     'label' => 'IP Address',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter'
            //     ],
            // ],

            // 'h_high' => [
            //     'label' => 'Hasil High',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            // 'h_med' => [
            //     'label' => 'Hasil Medium',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            // 'h_low' => [
            //     'label' => 'Hasil Low',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            'file_pdf' => [
                'label' => 'File PDF',
                'rules' => 'mime_in[file_pdf,application/pdf]|max_size[file_pdf,1024]',
                'errors' => [
                    'mime_in' => 'File yang diunggah harus berformat PDF.',
                    'max_size' => 'Ukuran file PDF tidak boleh melebihi 1MB.'
                ]
            ]
        ];
    
        $validation = \Config\Services::validation()->setRules($validationRules);

    if ($validation->withRequest($this->request)->run()) {
        $id = $this->request->getPost('id');
        $kd_pentest = $this->request->getPost('kd_pentest');
        $pemohon = $this->request->getPost('pemohon');
        $tanggal = $this->request->getPost('tanggal');
        $url_target = $this->request->getPost('url_target');
        $nama_in = $this->request->getPost('nama_in');
        $p_jawab = $this->request->getPost('p_jawab');
        $p_email = $this->request->getPost('p_email');
        $p_no = $this->request->getPost('p_no');
        $ip_addres = $this->request->getPost('ip_addres');
        $status_hg = $this->request->getPost('status_hg');
        $h_high = $this->request->getPost('h_high');
        $h_med = $this->request->getPost('h_med');
        $h_low = $this->request->getPost('h_low');
        $ket = $this->request->getPost('ket');
        $file_pdf = $this->request->getFile('file_pdf');

        // Periksa apakah file diunggah
        if ($file_pdf->isValid() && !$file_pdf->hasMoved()) {
            $kd_pentest = str_replace(['/', '\\'], '_', $kd_pentest);
            $nama_file = $kd_pentest . '_pentest.pdf';
            $lokasi_file = WRITEPATH . 'uploads/'; // Sesuaikan dengan direktori upload Anda
            $file_pdf->move($lokasi_file, $nama_file);
            $pdfPath = $lokasi_file . '/' . $nama_file;
        }
        else {
            // Setel nilai default jika file tidak diunggah
            $nama_file = null;
            $pdfPath = null;
        }
    
        $data = [
            'id' =>$id,
            'kd_pentest' => $kd_pentest,
            'pemohon' => $pemohon,
            'tanggal' => $tanggal,
            'url_target' => $url_target,
            'nama_in' => $nama_in,
            'p_jawab' => $p_jawab,
            'p_email' => $p_email,
            'p_no' => $p_no,
            'ip_addres' => $ip_addres,
            'status_hg' => $status_hg,
            'h_high' => $h_high,
            'h_med' => $h_med,
            'h_low' => $h_low,
            'ket' => $ket,
            'file_pdf' => $nama_file, // Nama file PDF disimpan sebagai string
            'pdf_data' => $pdfPath ? base64_encode(file_get_contents($pdfPath)) : null, // Data PDF diubah menjadi base64
            
        ];

        // Panggil metode model untuk menyimpan data
        $result = $this->model->save($data);

        if ($result) {
            $response = [
                'status' => 'success',
                'message' => 'Berhasil Mengupdate Data, Silakan Tutup Kembali',
                'error' => false,
            ];
        } else {
            $response = [
                'status' => 'error',
                'message' => 'Gagal Mengupdate Data, Silakan Periksa Kembali',
                'error' => true,
                'error_messages' => 'Gagal mngupdate data ke database.',
            ];
        }
    } else {
        $response = [
            'status' => 'error',
            'message' => 'Gagal Mengupdate Data, Silakan Periksa Kembali',
            'error' => true,
            'error_messages' => $validation->getErrors(),
        ];
    }
    return $this->response->setJSON($response); 
}

    public function hapus($id)
    {
        $this->model->delete($id);
        return redirect()->to('tabelpentest');
    }

    
    public function edit($id)
    {
        return json_encode($this->model->find($id));
    }

    public function index()
    {
        helper(['form']);
        $katakunci = $this->request->getGet('katakunci');
        if($katakunci)
        {
            $pencarian = $this->model->cari($katakunci);
        }
        else 
        {
            $pencarian = $this->model;
        }
        
        $data = [
            'judul' => 'Tabel',
            'subjudul' => 'Tabel User',
            'menu' => 'tabel',
            'submenu' => 'tabel pentest',
            'page' => 'admin/v_tb_pentest',
            'katakunci' => $katakunci,
            'dataDinas'=> $this->modelDinas->findAll(),
            'dataPentest' => $pencarian->orderBy('id', 'desc')->paginate(5),
            'pager' => $this->model->pager,
            'nomor' => ($this->request->getVar('page') == 1) ? '0' : $this->request->getVar('page'),
        ];
    
        return view('template/v_admin', $data);
    }
}