<?php

namespace App\Controllers;

use CodeIgniter\Files\File;
use Config\Services;
use App\Controllers\BaseController;
use App\Models\ModelPentest;
use App\Models\ModelDinas;
use CodeIgniter\Exceptions\PageNotFoundException;

class TabelPentest extends BaseController
{
    const UPLOAD_DIR = WRITEPATH . 'uploads';

    protected $model;
    protected $modelDinas;
    public function __construct()
    {
        $this->model = new ModelPentest();
        $this->modelDinas = new ModelDinas();
    }

    public function hapus($id)
    {
        $this->model->delete($id);
        return redirect()->to('tabelpentest');
    }

    public function edit($id)
    {
        return json_encode($this->model->find($id));
    }

    public function simpan() 
    {
        $validasi = \config\Services::validation();
        $aturan = [
            // 'id_pentest' => [
            //     'label' => 'ID Pentest',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter',
            //     ],
            // ],
            // 'pemohon' => [
            //     'label' => 'Pemohon',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',
            //     ],
            // ],
            
            // 'url_target' => [
            //     'label' => 'URL Target',
            //     'rules' => 'required|min_length[5]|',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',

            //     ],
            // ],

            // // 'p_jawab' => [
            // //     'label' => 'Nama Penanggung Jawab',
            //     'rules' => 'required|min_length[5]|',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',

            //     ],
            // ],

            // 'p_email' => [
            //     'label' => 'Email',
            //     'rules' => 'required|min_length[5]|valid_email',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter',
            //         'valid_email' => 'Email yang Anda masukan tidak valid'

            //     ],
            // ],

            // 'p_no' => [
            //     'label' => 'Kontak',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter'
            //     ],
            // ],

            // 'ip_addres' => [
            //     'label' => 'IP Address',
            //     'rules' => 'required|min_length[5]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 5 karakter'
            //     ],
            // ],

            // 'h_high' => [
            //     'label' => 'Hasil High',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            // 'h_med' => [
            //     'label' => 'Hasil Medium',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            // 'h_low' => [
            //     'label' => 'Hasil Low',
            //     'rules' => 'required|min_length[1]',
            //     'errors' => [
            //         'required'=>'{field} harus diisi',
            //         'min_length' => 'Minimum karakter untuk {field} adalah 1 karakter'
            //     ],
            // ],
            'file_pdf' => [
                'label' => 'File PDF',
                'rules' => 'uploaded[file_pdf]|mime_in[file_pdf,application/pdf]|max_size[file_pdf,1024]',
                'errors' => [
                    'uploaded' => 'Harap pilih file PDF untuk diunggah.',
                    'mime_in' => 'File yang diunggah harus berformat PDF.',
                    'max_size' => 'Ukuran file PDF tidak boleh melebihi 1MB.'
                ]
            ]
        ];

        $validasi->setRules($aturan);
        if($validasi->withRequest($this->request)->run()) 
        
        {
            $id = $this->request->getPost('id');
            $isEdit = !empty($id);
            $id_pentest = $this->request->getPost('id_pentest');
            $pemohon = $this->request->getPost('pemohon');
            $tanggal = $this->request->getPost('tanggal');
            $url_target = $this->request->getPost('url_target');
            $nama_in = $this->request->getPost('nama_in');
            $p_jawab = $this->request->getPost('p_jawab');
            $p_email = $this->request->getPost('p_email');
            $p_no = $this->request->getPost('p_no');
            $ip_addres = $this->request->getPost('ip_addres');
            $status_hg = $this->request->getPost('status_hg');
            $h_high = $this->request->getPost('h_high');
            $h_med = $this->request->getPost('h_med');
            $h_low = $this->request->getPost('h_low');
            $ket = $this->request->getPost('ket');
            $file_pdf = $this->request->getFile('file_pdf');

            // Periksa apakah file diunggah
            if ($file_pdf->isValid() && !$file_pdf->hasMoved()) {
                $nama_file = $file_pdf->getName();
                $lokasi_file = self::UPLOAD_DIR;
                $file_pdf->move($lokasi_file, $nama_file);
                $pdfPath = $lokasi_file . '/' . $nama_file;
                $pdfData = file_get_contents($pdfPath);
            }

            $data = [
                'id'=>$id,
                'id_pentest'=>$id_pentest,
                'pemohon'=>$pemohon,
                'tanggal'=>$tanggal,
                'url_target'=>$url_target,
                'nama_in'=>$nama_in,
                'p_jawab'=>$p_jawab,
                'p_email'=>$p_email,
                'p_no'=>$p_no,
                'ip_addres'=>$ip_addres,
                'status_hg'=>$status_hg,
                'h_high'=>$h_high,
                'h_med'=>$h_med,
                'h_low'=>$h_low,
                'ket'=>$ket,
                'file_pdf' => $nama_file, // Simpan nama file PDF ke dalam basis data
                'pdf_data' => base64_encode(file_get_contents($pdfPath)) // Simpan data file PDF ke dalam basis data
            
            ];
            
            if ($isEdit) {
                $this->model->update($id, $data);
            } else {
                $this->model->save($data);
            }
    

            $hasil['sukses'] ='Berhasil Memasukan Data, Silahkan Tutup Kembali';
            $hasil['error'] = false;

        }
        else
        {
            $hasil['sukses'] = 'Gagal Memasukan Data, Silahkan Periksa Kembali';
            $hasil['error'] = true;
            $hasil['error_messages'] = $validasi->getErrors();
        }

  
      return json_encode($hasil);
    }

    public function lihat_pdf($id)
    {
        $data = $this->model->find($id);
    
        if (!$data) {
            throw PageNotFoundException::forPageNotFound();
        }
    
        $pdfData = base64_decode($data['pdf_data']);
    
        $response = $this->response
            ->setStatusCode(200)
            ->setContentType('application/pdf')
            ->setBody($pdfData);
    
        return $response;
    }

    public function index()
    {
        helper(['form']);
        $katakunci = $this->request->getGet('katakunci');
        if($katakunci)
        {
            $pencarian = $this->model->cari($katakunci);
        }
        else 
        {
            $pencarian = $this->model;
        }

        
        $data = [
            'judul' => 'Tabel',
            'subjudul' => 'Tabel User',
            'menu' => 'tabel',
            'submenu' => 'tabel pentest',
            'page' => 'admin/v_tb_pentest',
            'katakunci' => $katakunci,
            'dataDinas'=> $this->modelDinas->findAll(),
            'dataPentest' => $pencarian->orderBy('id', 'desc')->paginate(5),
            'pager' => $this->model->pager,
            'nomor' => ($this->request->getVar('page') == 1) ? '0' : $this->request->getVar('page'),
        ];
    
        return view('template/v_admin', $data);
    }
}
